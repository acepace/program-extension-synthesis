
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jun 24 00:44:01 IDT 2018
//----------------------------------------------------

package jminor.ast;

import java.io.*;
import java.util.*;
import jminor.ast.Token;
import jminor.IntBinOp;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Sun Jun 24 00:44:01 IDT 2018
  */
@SuppressWarnings({"rawtypes", "unused"}) public class JminorParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JminorParser() {super();}

  /** Constructor which sets the default scanner. */
  public JminorParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\006\007\000\002\010\002\000\002\010\003\000" +
    "\002\007\003\000\002\007\004\000\002\011\005\000\002" +
    "\011\006\000\002\012\016\000\002\012\017\000\002\016" +
    "\002\000\002\016\003\000\002\017\002\000\002\017\003" +
    "\000\002\013\003\000\002\013\004\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\023\005\000\002\021\002\000\002\021\003\000\002\020" +
    "\003\000\002\020\004\000\002\022\004\000\002\025\002" +
    "\000\002\025\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\005\000\002\026\010\000\002" +
    "\026\010\000\002\027\003\000\002\027\005\000\002\030" +
    "\003\000\002\030\003\000\002\031\006\000\002\031\011" +
    "\000\002\031\015\000\002\031\011\000\002\031\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\032\005\000\002\033" +
    "\005\000\002\035\003\000\002\035\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\007\000\002\034\007\000\002\034\007\000\002" +
    "\034\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\006\004\012\052\006\001\002\000\010\002" +
    "\001\004\012\052\006\001\002\000\010\002\ufffc\004\ufffc" +
    "\052\ufffc\001\002\000\004\025\032\001\002\000\004\002" +
    "\031\001\002\000\010\002\uffff\004\uffff\052\uffff\001\002" +
    "\000\010\002\ufffd\004\ufffd\052\ufffd\001\002\000\004\052" +
    "\013\001\002\000\004\031\014\001\002\000\010\012\021" +
    "\032\ufffa\052\015\001\002\000\004\022\027\001\002\000" +
    "\010\012\021\032\ufff9\052\015\001\002\000\004\032\025" +
    "\001\002\000\010\012\ufff8\032\ufff8\052\ufff8\001\002\000" +
    "\004\052\022\001\002\000\004\022\023\001\002\000\004" +
    "\052\024\001\002\000\010\012\ufff5\032\ufff5\052\ufff5\001" +
    "\002\000\010\002\ufffb\004\ufffb\052\ufffb\001\002\000\010" +
    "\012\ufff7\032\ufff7\052\ufff7\001\002\000\004\052\030\001" +
    "\002\000\010\012\ufff6\032\ufff6\052\ufff6\001\002\000\004" +
    "\002\000\001\002\000\010\011\037\026\ufff2\052\033\001" +
    "\002\000\004\022\232\001\002\000\006\016\uffee\026\uffee" +
    "\001\002\000\006\016\230\026\ufff1\001\002\000\006\016" +
    "\uffec\026\uffec\001\002\000\004\052\033\001\002\000\004" +
    "\026\041\001\002\000\004\023\042\001\002\000\004\025" +
    "\043\001\002\000\006\026\ufff0\052\033\001\002\000\006" +
    "\016\uffea\026\uffea\001\002\000\006\016\225\026\uffef\001" +
    "\002\000\004\026\047\001\002\000\004\031\050\001\002" +
    "\000\032\005\051\006\uffe7\007\uffe7\010\uffe7\013\uffe7\014" +
    "\uffe7\025\uffe7\032\uffe7\043\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\001\002\000\004\052\033\001\002\000\032\005\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\025\uffe5\032\uffe5" +
    "\043\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002\000\030\006" +
    "\065\007\070\010\066\013\067\014\057\025\056\032\uffe2" +
    "\043\073\050\064\051\061\052\071\001\002\000\032\005" +
    "\051\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\025\uffe6" +
    "\032\uffe6\043\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000" +
    "\032\005\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\014\uffe4" +
    "\025\uffe4\032\uffe4\043\uffe4\050\uffe4\051\uffe4\052\uffe4\001" +
    "\002\000\016\006\065\025\056\043\073\050\064\051\061" +
    "\052\071\001\002\000\004\025\214\001\002\000\010\007" +
    "\uffe0\010\uffe0\032\uffe0\001\002\000\042\017\uffd0\020\uffd0" +
    "\021\uffd0\026\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\001\002\000\030\006\065\007\070\010\066\013" +
    "\067\014\057\025\056\032\uffe2\043\073\050\064\051\061" +
    "\052\071\001\002\000\010\007\070\010\210\032\uffe1\001" +
    "\002\000\042\017\uffcf\020\uffcf\021\uffcf\026\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\001\002\000\042" +
    "\017\uffce\020\uffce\021\uffce\026\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\001\002\000\004\007\070\001" +
    "\002\000\004\025\174\001\002\000\004\031\134\001\002" +
    "\000\042\017\uffd1\020\uffd1\021\uffd1\026\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\044\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\036\020" +
    "\106\021\131\033\104\034\102\035\111\036\113\037\105" +
    "\040\110\041\100\042\112\044\103\045\077\046\107\047" +
    "\101\001\002\000\016\006\065\025\056\043\073\050\064" +
    "\051\061\052\071\001\002\000\004\032\075\001\002\000" +
    "\010\002\ufff4\004\ufff4\052\ufff4\001\002\000\042\017\uffc0" +
    "\020\106\021\uffc0\026\uffc0\033\104\034\102\035\111\036" +
    "\113\037\105\040\110\041\100\042\112\044\103\045\077" +
    "\046\107\047\101\001\002\000\016\006\065\025\056\043" +
    "\073\050\064\051\061\052\071\001\002\000\016\006\065" +
    "\025\056\043\073\050\064\051\061\052\071\001\002\000" +
    "\016\006\065\025\056\043\073\050\064\051\061\052\071" +
    "\001\002\000\016\006\065\025\056\043\073\050\064\051" +
    "\061\052\071\001\002\000\016\006\065\025\056\043\073" +
    "\050\064\051\061\052\071\001\002\000\016\006\065\025" +
    "\056\043\073\050\064\051\061\052\071\001\002\000\016" +
    "\006\065\025\056\043\073\050\064\051\061\052\071\001" +
    "\002\000\004\052\121\001\002\000\016\006\065\025\056" +
    "\043\073\050\064\051\061\052\071\001\002\000\016\006" +
    "\065\025\056\043\073\050\064\051\061\052\071\001\002" +
    "\000\016\006\065\025\056\043\073\050\064\051\061\052" +
    "\071\001\002\000\016\006\065\025\056\043\073\050\064" +
    "\051\061\052\071\001\002\000\016\006\065\025\056\043" +
    "\073\050\064\051\061\052\071\001\002\000\040\017\uffc5" +
    "\020\106\021\uffc5\026\uffc5\033\uffc5\034\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\044\103\045\077\046\107" +
    "\047\101\001\002\000\042\017\uffc1\020\106\021\uffc1\026" +
    "\uffc1\033\104\034\102\035\111\036\113\037\105\040\110" +
    "\041\100\042\uffc1\044\103\045\077\046\107\047\101\001" +
    "\002\000\040\017\uffc6\020\106\021\uffc6\026\uffc6\033\uffc6" +
    "\034\uffc6\036\113\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044" +
    "\103\045\077\046\107\047\101\001\002\000\040\017\uffc3" +
    "\020\106\021\uffc3\026\uffc3\033\uffc3\034\uffc3\035\111\036" +
    "\113\037\uffc3\041\uffc3\042\uffc3\044\103\045\077\046\107" +
    "\047\101\001\002\000\042\017\uffcb\020\uffcb\021\uffcb\026" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\047\101\001" +
    "\002\000\042\017\uffc9\020\uffc9\021\uffc9\026\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002\000\040" +
    "\017\uffc4\020\106\021\uffc4\026\uffc4\033\uffc4\034\uffc4\035" +
    "\111\036\113\040\110\041\uffc4\042\uffc4\044\103\045\077" +
    "\046\107\047\101\001\002\000\042\017\uffc8\020\106\021" +
    "\uffc8\026\uffc8\033\uffc8\034\102\035\111\036\113\037\105" +
    "\040\110\041\uffc8\042\uffc8\044\103\045\077\046\107\047" +
    "\101\001\002\000\042\017\uffcd\020\uffcd\021\uffcd\026\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\044\uffcd\045\uffcd\046\107\047\101\001\002" +
    "\000\040\017\uffc7\020\106\021\uffc7\026\uffc7\033\uffc7\035" +
    "\111\036\113\037\105\040\110\041\uffc7\042\uffc7\044\103" +
    "\045\077\046\107\047\101\001\002\000\042\017\uffca\020" +
    "\uffca\021\uffca\026\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\001\002\000\042\017\uffc2\020\106\021\uffc2" +
    "\026\uffc2\033\104\034\102\035\111\036\113\037\105\040" +
    "\110\041\uffc2\042\uffc2\044\103\045\077\046\107\047\101" +
    "\001\002\000\042\017\uffcc\020\uffcc\021\uffcc\026\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\044\103\045\uffcc\046\107\047\101\001\002\000" +
    "\016\006\065\025\056\043\073\050\064\051\061\052\071" +
    "\001\002\000\036\017\133\020\106\033\104\034\102\035" +
    "\111\036\113\037\105\040\110\041\100\042\112\044\103" +
    "\045\077\046\107\047\101\001\002\000\032\006\uffd6\007" +
    "\uffd6\010\uffd6\013\uffd6\014\uffd6\023\uffd6\025\uffd6\032\uffd6" +
    "\043\uffd6\050\uffd6\051\uffd6\052\uffd6\001\002\000\004\027" +
    "\136\001\002\000\004\023\161\001\002\000\004\052\140" +
    "\001\002\000\006\030\uffbd\041\uffbd\001\002\000\006\020" +
    "\146\033\145\001\002\000\006\030\143\041\142\001\002" +
    "\000\004\052\140\001\002\000\006\023\uffbe\032\uffbe\001" +
    "\002\000\006\030\uffbc\041\uffbc\001\002\000\012\006\160" +
    "\050\157\051\156\052\155\001\002\000\004\052\147\001" +
    "\002\000\004\033\150\001\002\000\012\006\154\050\153" +
    "\051\152\052\151\001\002\000\006\030\uffb7\041\uffb7\001" +
    "\002\000\006\030\uffb5\041\uffb5\001\002\000\006\030\uffb4" +
    "\041\uffb4\001\002\000\006\030\uffb6\041\uffb6\001\002\000" +
    "\006\030\uffbb\041\uffbb\001\002\000\006\030\uffb9\041\uffb9" +
    "\001\002\000\006\030\uffb8\041\uffb8\001\002\000\006\030" +
    "\uffba\041\uffba\001\002\000\026\006\065\013\067\014\057" +
    "\024\166\025\056\027\136\043\073\050\064\051\061\052" +
    "\071\001\002\000\006\023\uffda\032\uffda\001\002\000\026" +
    "\006\065\013\067\014\057\023\uffd7\025\056\032\uffd7\043" +
    "\073\050\064\051\061\052\071\001\002\000\006\023\uffd8" +
    "\032\uffd8\001\002\000\006\023\171\032\170\001\002\000" +
    "\004\032\167\001\002\000\010\007\uffdb\010\uffdb\032\uffdb" +
    "\001\002\000\010\007\uffdc\010\uffdc\032\uffdc\001\002\000" +
    "\024\006\065\013\067\014\057\025\056\027\136\043\073" +
    "\050\064\051\061\052\071\001\002\000\006\023\uffd9\032" +
    "\uffd9\001\002\000\032\006\uffd2\007\uffd2\010\uffd2\013\uffd2" +
    "\014\uffd2\023\uffd2\025\uffd2\032\uffd2\043\uffd2\050\uffd2\051" +
    "\uffd2\052\uffd2\001\002\000\016\006\065\025\056\043\073" +
    "\050\064\051\061\052\071\001\002\000\036\020\106\026" +
    "\176\033\104\034\102\035\111\036\113\037\105\040\110" +
    "\041\100\042\112\044\103\045\077\046\107\047\101\001" +
    "\002\000\004\031\177\001\002\000\022\006\065\013\067" +
    "\014\057\025\056\043\073\050\064\051\061\052\071\001" +
    "\002\000\024\006\065\013\067\014\057\025\056\032\201" +
    "\043\073\050\064\051\061\052\071\001\002\000\034\006" +
    "\uffd5\007\uffd5\010\uffd5\013\uffd5\014\uffd5\015\202\023\uffd5" +
    "\025\uffd5\032\uffd5\043\uffd5\050\uffd5\051\uffd5\052\uffd5\001" +
    "\002\000\004\031\203\001\002\000\022\006\065\013\067" +
    "\014\057\025\056\043\073\050\064\051\061\052\071\001" +
    "\002\000\024\006\065\013\067\014\057\025\056\032\205" +
    "\043\073\050\064\051\061\052\071\001\002\000\032\006" +
    "\uffd4\007\uffd4\010\uffd4\013\uffd4\014\uffd4\023\uffd4\025\uffd4" +
    "\032\uffd4\043\uffd4\050\uffd4\051\uffd4\052\uffd4\001\002\000" +
    "\010\007\uffdf\010\uffdf\032\uffdf\001\002\000\010\007\uffde" +
    "\010\uffde\032\uffde\001\002\000\004\007\070\001\002\000" +
    "\010\007\uffdd\010\uffdd\032\uffdd\001\002\000\004\032\213" +
    "\001\002\000\010\002\ufff3\004\ufff3\052\ufff3\001\002\000" +
    "\016\006\065\025\056\043\073\050\064\051\061\052\071" +
    "\001\002\000\036\020\106\026\216\033\104\034\102\035" +
    "\111\036\113\037\105\040\110\041\100\042\112\044\103" +
    "\045\077\046\107\047\101\001\002\000\004\031\217\001" +
    "\002\000\022\006\065\013\067\014\057\025\056\043\073" +
    "\050\064\051\061\052\071\001\002\000\024\006\065\013" +
    "\067\014\057\025\056\032\221\043\073\050\064\051\061" +
    "\052\071\001\002\000\032\006\uffd3\007\uffd3\010\uffd3\013" +
    "\uffd3\014\uffd3\023\uffd3\025\uffd3\032\uffd3\043\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\001\002\000\036\020\106\026\223\033" +
    "\104\034\102\035\111\036\113\037\105\040\110\041\100" +
    "\042\112\044\103\045\077\046\107\047\101\001\002\000" +
    "\042\017\uffbf\020\uffbf\021\uffbf\026\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\001\002\000\032\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\013\uffe3\014\uffe3\025\uffe3\032" +
    "\uffe3\043\uffe3\050\uffe3\051\uffe3\052\uffe3\001\002\000\004" +
    "\052\033\001\002\000\006\016\uffe9\026\uffe9\001\002\000" +
    "\006\016\uffed\026\uffed\001\002\000\006\011\037\052\033" +
    "\001\002\000\006\016\uffeb\026\uffeb\001\002\000\004\052" +
    "\233\001\002\000\036\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\013\uffe8\014\uffe8\016\uffe8\025\uffe8\026\uffe8\032\uffe8\043" +
    "\uffe8\050\uffe8\051\uffe8\052\uffe8\001\002\000\010\002\ufffe" +
    "\004\ufffe\052\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\014\003\006\004\003\005\007\006\010\012" +
    "\004\001\001\000\010\005\233\006\010\012\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\015\010\016\011\017\001\001\000" +
    "\002\001\001\000\004\011\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\035\014\034\016\037\023\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\044\017" +
    "\045\023\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\053\021" +
    "\052\022\051\001\001\000\004\023\223\001\001\000\002" +
    "\001\001\000\014\024\062\025\073\026\057\031\061\032" +
    "\071\001\001\000\004\022\054\001\001\000\002\001\001" +
    "\000\004\032\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\062\025\211\026\057" +
    "\031\172\032\071\001\001\000\004\026\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\127\001" +
    "\001\000\004\032\126\001\001\000\004\032\125\001\001" +
    "\000\004\032\124\001\001\000\004\032\123\001\001\000" +
    "\004\032\122\001\001\000\004\032\121\001\001\000\002" +
    "\001\001\000\004\032\117\001\001\000\004\032\116\001" +
    "\001\000\004\032\115\001\001\000\004\032\114\001\001" +
    "\000\004\032\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\131\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\134\001\001" +
    "\000\002\001\001\000\006\034\136\035\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\027\164\030" +
    "\161\031\162\032\071\033\163\001\001\000\002\001\001" +
    "\000\006\031\172\032\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\171\031\162\032\071\033\163\001" +
    "\001\000\002\001\001\000\006\031\172\032\071\001\001" +
    "\000\004\032\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\177\032\071\001\001\000\006\031\172" +
    "\032\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\203\032\071\001\001\000\006\031\172\032\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\217\032\071" +
    "\001\001\000\006\031\172\032\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\230\023\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JminorParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JminorParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JminorParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   private JminorLexer lexer;
    
   /**
    * Parses the file with the given name and returns the corresponding abstract syntax tree.
    */
   public ASTProblem parseFile(String file) throws SyntaxError, FileNotFoundException, Exception {
	lexer = new JminorLexer(new FileReader(file));
	JminorParser parser = new JminorParser(lexer);
	Symbol root = parser.parse();
	return (ASTProblem) root.value;
  }
  	
  @Override	
  public void report_fatal_error(String message, Object info) throws SyntaxError {
    Token token = (Token) info;
    throw new SyntaxError("on " + token.text, token.line, token.column);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unused", "unchecked"}) class CUP$JminorParser$actions {
  private final JminorParser parser;

  /** Constructor */
  CUP$JminorParser$actions(JminorParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JminorParser$do_action(
    int                        CUP$JminorParser$act_num,
    java_cup.runtime.lr_parser CUP$JminorParser$parser,
    java.util.Stack            CUP$JminorParser$stack,
    int                        CUP$JminorParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JminorParser$result;

      /* select the action based on the action number */
      switch (CUP$JminorParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // storeVal ::= ID DOT ID EQ BOOLEAN_VAL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTBooleanFieldVal(field, src, val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // storeVal ::= ID DOT ID EQ INT_VAL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntFieldVal(field, src, val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // storeVal ::= ID DOT ID EQ NULL 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		 RESULT = new ASTRefFieldVal(field, src, AST.NULL_VAL_NAME); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // storeVal ::= ID DOT ID EQ ID 
            {
              AST RESULT = null;
		int srcleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left;
		int srcright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).right;
		String src = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int dstleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int dstright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String dst = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTRefFieldVal(field, src, dst); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // storeVal ::= ID EQ BOOLEAN_VAL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTBooleanVarVal(var, val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // storeVal ::= ID EQ INT_VAL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntVarVal(var, val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // storeVal ::= ID EQ NULL 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		 RESULT = new ASTRefVarVal(var, AST.NULL_VAL_NAME); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // storeVal ::= ID EQ ID 
            {
              AST RESULT = null;
		int varleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTRefVarVal(var, val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(26/*storeVal*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // jminorElems ::= jminorElems AND storeVal 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(v);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(27/*jminorElems*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // jminorElems ::= storeVal 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		AST v = (AST)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<ASTVal>();
	   RESULT.add(v);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(27/*jminorElems*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // store ::= LB jminorElems RB 
            {
              ASTStore RESULT = null;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List elems = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTStore(elems); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(25/*store*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= LP expr RP 
            {
              ASTExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTExpr e = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = e; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= NOT expr 
            {
              ASTExpr RESULT = null;
		int subleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr sub = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTNotExpr(sub); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr OR expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTOrExpr(lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr AND expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTAndExpr(lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr GEQ expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.GEQ, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr GT expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.GT, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr LEQ expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.LEQ, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr LT expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.LT, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr NEQ expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTNotExpr(new ASTEqExpr(lhs, rhs)); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr EQ expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTEqExpr(lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr DOT ID 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int fieldleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int fieldright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String field = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTDerefExpr(lhs, field); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DIVIDE expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.DIVIDE, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr TIMES expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.TIMES, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr MINUS expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.MINUS, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr PLUS expr 
            {
              ASTExpr RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntBinOpExpr(IntBinOp.PLUS, lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NULL 
            {
              ASTExpr RESULT = null;
		 RESULT = ASTNullExpr.v; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= BOOLEAN_VAL 
            {
              ASTExpr RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		Boolean val = (Boolean)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTBooleanValExpr(val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= INT_VAL 
            {
              ASTExpr RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTIntValExpr(val); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= ID 
            {
              ASTExpr RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTVarExpr(varName); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(24/*expr*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= stmt stmt 
            {
              ASTStmt RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTStmt first = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTStmt second = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTSeq(first, second); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(23/*stmt*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= WHILE LP expr RP LCB stmt RCB 
            {
              ASTStmt RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).right;
		ASTExpr cond = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTStmt body = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTWhile(cond, body); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(23/*stmt*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= IF LP expr RP LCB stmt RCB ELSE LCB stmt RCB 
            {
              ASTStmt RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-8)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-8)).right;
		ASTExpr cond = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-8)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).right;
		ASTStmt thenStmt = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).value;
		int elseStmtleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int elseStmtright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTStmt elseStmt = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTIf(cond, thenStmt, elseStmt); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(23/*stmt*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-10)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= IF LP expr RP LCB stmt RCB 
            {
              ASTStmt RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).right;
		ASTExpr cond = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).value;
		int thenStmtleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int thenStmtright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTStmt thenStmt = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTIf(cond, thenStmt); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(23/*stmt*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= expr ASSIGN expr SEMI 
            {
              ASTStmt RESULT = null;
		int lhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left;
		int lhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).right;
		ASTExpr lhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTExpr rhs = (ASTExpr)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTAssign(lhs, rhs); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(23/*stmt*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // step ::= stmt 
            {
              ASTStep RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTStmt s = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = s; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(22/*step*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // step ::= store 
            {
              ASTStep RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTStore s = (ASTStore)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = s;	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(22/*step*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exampleSteps ::= exampleSteps ARROW step 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int nextleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int nextright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTStep next = (ASTStep)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(next);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(21/*exampleSteps*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exampleSteps ::= step 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTStep s = (ASTStep)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<ASTStep>();
	   RESULT.add(s);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(21/*exampleSteps*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // example ::= EXAMPLE LCB store ARROW ELLIPSIS RCB 
            {
              ASTExample RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).right;
		ASTStore s = (ASTStore)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).value;
		 var steps = new ArrayList<ASTStep>();
	   steps.add(s);
	   RESULT = new ASTExample(steps);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(20/*example*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // example ::= EXAMPLE LCB store ARROW exampleSteps RCB 
            {
              ASTExample RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).right;
		ASTStore s = (ASTStore)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).value;
		int stepsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int stepsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List steps = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 exampleSteps:steps.add(0, s);
	   RESULT = new ASTExample(steps);	    
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(20/*example*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // examples ::= examples TEST example 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(e);
	   e.isTest = true;
	   RESULT = prefix;	   
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(18/*examples*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // examples ::= examples example 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(18/*examples*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // examples ::= TEST example 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 e.isTest = true;
	   RESULT = new ArrayList<ASTExample>();
	   RESULT.add(e);	   
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(18/*examples*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // examples ::= example 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTExample e = (ASTExample)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<ASTExample>();
	   RESULT.add(e);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(18/*examples*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // optionalExamples ::= examples 
            {
              List RESULT = null;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = examples; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(19/*optionalExamples*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // optionalExamples ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTExample>(); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(19/*optionalExamples*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // temp ::= VAR var 
            {
              ASTVarDecl RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl v = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = v;
	   v.readonly = false;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(16/*temp*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // temps ::= temps temp 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl t = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(t);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(14/*temps*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // temps ::= temp 
            {
              List RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl t = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(t);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(14/*temps*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optionalTemps ::= temps 
            {
              List RESULT = null;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = temps; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(15/*optionalTemps*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // optionalTemps ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVarDecl>(); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(15/*optionalTemps*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var ::= ID COLON ID 
            {
              ASTVarDecl RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTVarDecl(name, type);
	   RESULT.readonly = true;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(17/*var*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // outputArgs ::= outputArgs COMMA var 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(11/*outputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // outputArgs ::= var 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 a.readonly = false;
	   RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(a);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(11/*outputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // inputArgs ::= inputArgs COMMA inputArg 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(a);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(10/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // inputArgs ::= inputArg 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<ASTVarDecl>();
	   RESULT.add(a);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(10/*inputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inputArg ::= MUT var 
            {
              ASTVarDecl RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 a.readonly = false;
	   RESULT = a;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(9/*inputArg*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inputArg ::= var 
            {
              ASTVarDecl RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTVarDecl a = (ASTVarDecl)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 a.readonly = true;
	   RESULT = a;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(9/*inputArg*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // optionalOutputArgs ::= outputArgs 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = args; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(13/*optionalOutputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // optionalOutputArgs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVarDecl>(); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(13/*optionalOutputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalInputArgs ::= inputArgs 
            {
              List RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		List args = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = args; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(12/*optionalInputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalInputArgs ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTVarDecl>(); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(12/*optionalInputArgs*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // funDef ::= ID LP optionalInputArgs RP ARROW LP optionalOutputArgs RP LCB optionalTemps stmt optionalExamples RCB 
            {
              ASTFun RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-12)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-12)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-12)).value;
		int inargsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-10)).left;
		int inargsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-10)).right;
		List inargs = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-10)).value;
		int outargsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-6)).left;
		int outargsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-6)).right;
		List outargs = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-6)).value;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int progright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		ASTStmt prog = (ASTStmt)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTFun(name, inargs, outargs, temps, prog, examples); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(8/*funDef*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-12)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funDef ::= ID LP optionalInputArgs RP ARROW LP optionalOutputArgs RP LCB optionalTemps optionalExamples RCB 
            {
              ASTFun RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-11)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-11)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-11)).value;
		int inargsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-9)).left;
		int inargsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-9)).right;
		List inargs = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-9)).value;
		int outargsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).left;
		int outargsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).right;
		List outargs = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-5)).value;
		int tempsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int tempsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		List temps = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int examplesleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int examplesright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List examples = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTFun(name, inargs, outargs, temps, null, examples); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(8/*funDef*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // field ::= GHOST ID COLON ID 
            {
              ASTDeclField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTDeclField(name, type, true); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(7/*field*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // field ::= ID COLON ID 
            {
              ASTDeclField RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTDeclField(name, type, false); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(7/*field*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields ::= fields field 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTDeclField f = (ASTDeclField)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(f);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fields ::= field 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTDeclField f = (ASTDeclField)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<ASTDeclField>();
	   RESULT.add(f);
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(5/*fields*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalFields ::= fields 
            {
              List RESULT = null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = fields; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(6/*optionalFields*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // optionalFields ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList<ASTDeclField>(); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(6/*optionalFields*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // typeDef ::= TYPE ID LCB optionalFields RCB 
            {
              ASTRefType RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-3)).value;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List fields = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		 RESULT = new ASTRefType(name, fields); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(4/*typeDef*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elem ::= funDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTFun e = (ASTFun)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = e; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elem ::= typeDef 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		ASTRefType e = (ASTRefType)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = e; 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(3/*elem*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemList ::= elemList elem 
            {
              List RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		List prefix = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 prefix.add(e);
	   RESULT = prefix;
	
              CUP$JminorParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elemList ::= elem 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ArrayList<AST>();
	   RESULT.add(e);
    
              CUP$JminorParser$result = new java_cup.runtime.Symbol(2/*elemList*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= problem EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).right;
		ASTProblem start_val = (ASTProblem)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).value;
		RESULT = start_val;
              CUP$JminorParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$JminorParser$parser.done_parsing();
          return CUP$JminorParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // problem ::= elemList 
            {
              ASTProblem RESULT = null;
		int elementsleft = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left;
		int elementsright = ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right;
		List elements = (List)((java_cup.runtime.Symbol) CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).value;
		 RESULT = new ASTProblem(elements); 
              CUP$JminorParser$result = new java_cup.runtime.Symbol(1/*problem*/, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$JminorParser$stack.elementAt(CUP$JminorParser$top-0)).right, RESULT);
            }
          return CUP$JminorParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

