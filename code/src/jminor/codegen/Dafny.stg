JminorSemantics(types, vars, actions) ::= <<
Types = {
  $types:{it|$it.name$}; separator="\n"$
}

Variables = {
  $vars; separator="\n"$
}

Commands = {
  $actions; separator="\n"$
}
>>

IntType() ::= <<int>>

RefType(name, fields) ::= <<
type $name$ {
  $fields; separator="\n"$
}
>>

Field(name, dstType, ghost) ::= <<
$if(ghost)$ghost $else$$endif$$name$ : $dstType$
>>

IntField(name) ::= <<$name$>>

IntVar(name, is_readonly) ::= <<
$if(is_readonly)$$else$mut $endif$$name$
>>

RefVar(name, is_readonly) ::= <<
$if(is_readonly)$$else$mut $endif$$name$
>>

True() ::= <<true>>
IntVal(num) ::= <<$num$>>

Var(name) ::= <<$name$>>

VarExpr(varName) ::= <<$varName$>>
NullExpr() ::= <<null>>
ValExpr(val) ::= <<$val$>>
NewExpr(raw_type) ::= <<new $raw_type.name$()>>
DerefExpr(lhs, field) ::= <<$lhs$.$field$>>
EqExpr(lhs, rhs) ::= <<$lhs$ == $rhs$>>
IntBinOpExpr(lhs, op, rhs) ::= <<($lhs$ $op$ $rhs$)>>
LtExpr(lhs, rhs) ::= <<$lhs$ < $rhs$>>
OrExpr(lhs, rhs) ::= <<($lhs$ || $rhs$)>>
AndExpr(lhs, rhs) ::= <<$lhs$ && $rhs$>>
NotExpr(sub) ::= <<!($sub$)>>

RetStmt() ::= <<return;>>

AssignStmt(lhs, rhs) ::= <<$lhs$ := $rhs$;>>

SeqStmt(first, second) ::= <<
$first$
$second$
>>

IfStmt(cond, thenNode, elseNode) ::= <<
if ($cond$) {
  $thenNode$
}
else {
  $elseNode$
}
>>

WhileStmt(cond, body) ::= <<
while ($cond$) {
  $body$
}
>>
